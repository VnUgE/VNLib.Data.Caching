# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

version: "3"

includes:
  install:
    taskfile: install.taskfile.yaml

  plugins:
    taskfile: plugins.taskfile.yaml

  container:
    dir: container  #always run from the container directory
    taskfile: container/Taskfile.yaml
    vars:
      PACKAGE_FILE_NAME: "vncache-oci.tgz"  #the name of the output package file

tasks:

  build:
    cmds:
    - for: [ build/, build/lib/, build/plugins/, build/webserver/, build/config/ ]
      cmd: powershell mkdir -Force "{{ .ITEM }}"

    - task: plugins:all
    - task: compile-config

     #remove runtime-shared libs before they are copied
    - task: prune-plugin-libs
    - task: parallel-envs
    #run container build last
    - task: container:build

  parallel-envs:
    deps: 
     - task: create-env
       vars: { TARGET_OS: 'windows-x64' }
     - task: create-env
       vars: { TARGET_OS: 'posix' }

  create-env:
    cmds:
    #create dir for env
    - cmd: powershell mkdir -Force "build/{{ .TARGET_OS }}"
    
    #copy build files for target os
    - for: [ plugins, lib, config, webserver ]
      cmd: cd build/ && powershell cp -Recurse -Force "{{ .ITEM }}" "{{ .TARGET_OS }}"

    #copy release taskfile and rename it
    - cmd: powershell cp -Force release.taskfile.yaml "build/{{ .TARGET_OS }}/Taskfile.yaml"

  compile-config:
    internal: false
    dotenv: ['build.env']  #use the local .env file when compiling config variables
    cmds:
     - cmd: powershell mkdir -Force 'build/config/'
     - cmd: powershell './compile.ps1' -InputDir 'config-templates/' -OutputDir 'build/config/'

  prune-plugin-libs:
    cmds:
    - for: ['vnlib.utils.dll' , 'vnlib.net.http.dll', 'VNLib.Hashing.Portable.dll', 'VNLib.Plugins.Essentials.dll', 'VNLib.Plugins.dll', 'Serilog.dll', 'Serilog.Sinks.Console.dll', 'Serilog.Sinks.File.dll']
      cmd: cd build/plugins && powershell 'Get-ChildItem -Path . -Recurse -File -Filter "{{ .ITEM }}" | Remove-Item -Force'

  postbuild_success:
    cmds:
    - cmd: powershell mkdir -Force bin
    - task: pb-parallel

    #cleanup unnecessary build files that clog up the pipeline
    - cmd: powershell rm -Recurse -Force build/
      ignore_error: true

    - task: container:postbuild_success

  pb-parallel:
    internal: true
    deps:
     - task: pack
       vars: { TARGET_OS: 'windows-x64' }
     - task: pack
       vars: { TARGET_OS: 'posix' }
    cmds:
    - echo "Packing complete"

  pack:
    internal: true
    vars:
      TAR_OUT_DIR: '{{ .USER_WORKING_DIR }}/{{ .BINARY_DIR }}'
    cmds:
    - cmd: powershell mkdir -Force "build/{{ .TARGET_OS }}/"
      ignore_error: true
    - cmd: cd build/{{ .TARGET_OS }} && tar -czf "{{ .TAR_OUT_DIR }}/{{ .TARGET_OS }}-release.tgz" .

  clean:
    ignore_error: true
    cmds:
    - for: [ build/, bin/ ]
      cmd: powershell rm -Recurse -Force '{{ .ITEM }}'

    - task: container:clean