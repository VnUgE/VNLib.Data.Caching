# https://taskfile.dev

#Inlcuded taskfile for object cache server that is used to produce
#ci builds for standalone caching servers

version: "3"

vars:
  DATA_DIR: "data"

tasks:

  run:
    aliases: [ default ]
    desc: "Runs the server in release mode"
    interactive: true
    env: 
      #libraries intentionally do not have extensions, for cross-platform compatibility, the server will load them regardless
      VNLIB_SHARED_HEAP_FILE_PATH: lib/vnlib_rpmalloc{{if eq OS "windows"}}.dll{{else}}.so{{end}}
      VNLIB_COMPRESS_DLL_PATH: lib/vnlib_compress{{if eq OS "windows"}}.dll{{else}}.so{{end}}
    cmds:
    - cmd: dotnet webserver/VNLib.WebServer.dll --config config/config.json {{ .CLI_ARGS }}

  container-run:
    desc: "Runs the server if called from inside a container"
    interactive: true
    platforms: [ linux ]
    cmds:
     - defer: 'rm -rf config/'
     #merge user assets
     - cmd: cp -r 'usr/assets/*' 'plugins/assets/'
       ignore_error: true
     #merge config files from environment
     - task: merge-config
     - cmd: echo "Config merged, starting server"
       silent: true
     - task: run

  setup-apt:
     desc: "Performs initial setup on Debian apt amd64 based machines"
     silent: true
     cmds:
     - cmd: apt update
     - cmd: apt install -y dotnet-runtime-8.0 gcc cmake git
     - task: setup
     - cmd: echo "Setup complete" 

  setup-dnf:
     desc: "Performs initial setup on Fedora/Redhat amd (dnf) based machines"
     silent: true
     cmds:
     - cmd: dnf update
     - cmd: dnf install -y dotnet-runtime-8.0 gcc cmake git
     - task: setup
     - cmd: echo "Setup complete"

  setup-apk:
     desc: "Performs initial setup using the APK package manager for amd64 based machines"
     silent: true
     cmds:
     - cmd: apk update
     - cmd: apk add --no-cache dotnet8-runtime build-base cmake git
     - task: setup
     - cmd: echo "Setup complete"

  setup:
    desc: "Performs platform agnostic setup tasks without installing tools (no sudo needed)"
    deps:
      #build rpmalloc lib
      - task: build-rpmalloc
      - task: build-compress

  build-rpmalloc:
    internal: true
    dir: 'lib/'
    cmds:
    #build rpmalloc library for linux/mac
    - cmd: cd vnlib_rpmalloc/ && task && cp build/{{ OS }}/libvn_rpmalloc{{if eq OS "darwin"}}.dylib{{else}}.so{{end}} ../vnlib_rpmalloc.so
      platforms: [ linux, darwin ]
      
    #for windows just copy the existing dll
    - cmd: powershell cp vnlib_rpmalloc/vnlib_rpmalloc.dll vnlib_rpmalloc.dll
      platforms: [ windows/amd64 ]

  build-compress:
    internal: true
    dir: 'lib/'
    cmds:
    #build the native compressor library for linux/mac
    - cmd: cd vnlib_compress/ && task && cp build/{{ OS }}/libvn_compress{{if eq OS "darwin"}}.dylib{{else}}.so{{end}} ../vnlib_compress.so
      platforms: [ linux, darwin ]

    #windows now supports pre-compiled libs
    - cmd: powershell cp vnlib_compress/vnlib_compress.dll vnlib_compress.dll
      platforms: [ windows/amd64 ]

  merge-config:
    internal: true
    platforms: [ linux, darwin ]
    vars:
      #find all config templates
      CONFIG_TEMPLATES: 
        sh: 'find config-templates/ -type f -name "*.json"'
    cmds:
      - cmd: mkdir -p config
      - for: { var: CONFIG_TEMPLATES }
        cmd: bash compile.sh '{{ .ITEM }}' 'config/{{ .ITEM | base | replace "-template" "" }}'

  container-set-perms:
    desc: "Sets file and folder permissions for container deployment"
    platforms: [ linux ]
    vars:
      READONLY_FILES: |
        lib/
        webserver/
        usr/
        root/
        config-templates/
        compile.sh
        Taskfile.yaml

    cmds:
    - cmd: mkdir root
    - cmd: chown -R 1000:1000 /app
    #set all files to read only
    - for: { var: READONLY_FILES }
      cmd: chmod -R 500 {{ .ITEM }}